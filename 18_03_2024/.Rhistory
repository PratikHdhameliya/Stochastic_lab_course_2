moment <- function(data, k = 5:(sum(data>0)-1)) {
X <- sort(data[data>0], decreasing=TRUE)
n <- length(X)
if (!all(k < n)) {
k <- k[k < n]
warning("Only those k for which X_{n-k:n} is positive are retained.", call. = FALSE)
}
std.err <- numeric(length(k))
# --- Moment estimates
l <- log(X[1:(max(k)+1)])
s1 <- cumsum(l[1:max(k)])[k]
s2 <-	cumsum((l[1:max(k)])^2)[k]
M1 <- s1 / k - l[k+1]
M2 <- s2 / k - 2 * l[k+1] * s1 / k + (l[k+1])^2
Moment <- M1 + 1 - 0.5 / (1 - M1^2 / M2)
# --- standard errors
if (any(Moment >= 0)) {
I <- Moment >= 0
g <- Moment[I]
std.err[I] <- 1 + g^2
}
if (any(Moment < 0)) {
I <- Moment < 0
g <- Moment[I]
std.err[I] <- (1-g)^2 * (1-2*g) * (6*g^2 - g + 1) / ((1-3*g) * (1-4*g))
}
std.err <- sqrt(std.err/k)
# --- output list
out <- list(n = n, k = k, threshold = X[k+1], estimate = Moment,
std.err = std.err)
invisible(out)
}
# Load necessary packages
library(readr)
library(lubridate)
library(dplyr)
Hill_estimator <- function(data, k) {
data <- as.numeric(data)
sorted_data <- sort(data, decreasing = TRUE)
top_k <- sorted_data[1:(k - 1)]
last_k <- sorted_data[k]
avg <- sum(log(top_k)) / k  - log(last_k)
return(avg)
}
hill_estimator_plot_multiple <- function(ks, cauchy_samples) {
# Initialize list to store Hill estimates for each column
hill_estimates <- vector("list", 5)
# Calculate Hill estimates for each column
for (col in 1:5) {
hill_estimates[[col]] <- sapply(ks, function(k) Hill_estimator(cauchy_samples[, col], k))
}
# Convert list to data frame
df <- data.frame(k = rep(ks, times = 5),
Hill_Estimate = unlist(hill_estimates),
Column = factor(rep(1:5, each = length(ks))))
# Plot line graph
library(ggplot2)
ggplot(df, aes(x = k, y = Hill_Estimate, color = Column)) +
geom_line() +
labs(x = "k", y = "Hill Estimate",
title = "Hill Estimates for Different Columns and Values of k") +
scale_color_discrete(name = "Column")
}
# Set the seed for reproducibility
set.seed(123)
# Number of samples
num_samples <- 100
# Sample size
sample_size <- 1000
# Simulate data
cauchy_samples <- matrix(rcauchy(num_samples * sample_size), nrow = sample_size)
# Simulate data from standard FrÃ©chet distribution
frechet_samples <- matrix(rf(num_samples * sample_size, df1 = 1, df2 = 1, ncp = 0), nrow = sample_size)
# Simulate data from Student-t distribution with 3 degrees of freedom
student_samples <- matrix(rt(num_samples * sample_size, df = 3), nrow = sample_size)
kc<-seq(10,450)  #100,200
kf<-seq(10,850) #200,370
ks<-seq(10,400)  #100,250
# Example usage
hill_estimator_plot_multiple(kc, cauchy_samples)
hill_estimator_plot_multiple(kf,frechet_samples)
hill_estimator_plot_multiple(ks,student_samples)
Hill_estimates_matrix <- function(ks, data) {
# Initialize a matrix to store the results for each value of k
hill_estimates <- matrix(NA, nrow = ncol(data), ncol = length(ks))
# Loop over each value of k
for (j in seq_along(ks)) {
# Loop over each row of data
for (i in 1:ncol(data)) {
hill_estimates[i, j] <- Hill_estimator(data[,i] , k = ks[j])
}
}
# Return the transposed matrix of Hill estimates
return(t(hill_estimates))
}
Hill_estimates_histogram <- function(data, kc) {
# Calculate the Hill estimates matrix
Cauchy_matrix <- Hill_estimates_matrix(kc, data)
# Initialize a list to store the means over each column
mean_over_k <- list()
# Calculate mean over each column
for (i in 1:ncol(Cauchy_matrix)) {
mean_over_k[[i]] <- mean(Cauchy_matrix[, i])
}
# Unlist the means
unlisted_mean <- unlist(mean_over_k)
# Plot the histogram
hist(unlisted_mean, breaks = 10)
}
Hill_estimates_histogram(cauchy_samples,kc)
Hill_estimates_histogram(frechet_samples,kf)
Hill_estimates_histogram(student_samples,ks)
###################################TASK_2###############################
density_function <- function(x, gamma) {
if (1 + gamma * x <= 0) {
return(0)  # Return zero density outside of the domain
}
return(exp(-((1 + gamma * x) ^ (-1 / gamma)))*((1+gamma*x)^((-1-gamma)/(gamma))))
}
data <- read.csv("39001_gdf.csv")
df<- data$timestamp
data<- data[-(1:19),]
colnames(data)<-c("Date","River_flow_meters_per_second","extra")
data<- data[, !colnames(data) == "extra", drop = FALSE]
# Convert the date column to a Date object
data$Date <- as.Date(data$Date)
# Extract the month from the date column
data$month <- month(data$Date, label = TRUE)
# Define a function to determine the season based on the month
get_season <- function(month) {
if (month %in% c("Mar", "Apr", "May")) {
return("Spring")
} else if (month %in% c("Jun", "Jul", "Aug")) {
return("Summer")
} else if (month %in% c("Sep", "Oct", "Nov")) {
return("Fall")
} else {
return("Winter")
}
}
# Apply the function to the "month" column to get the season
data$season <- sapply(data$month, get_season)
# Filter data for each season
spring_data <- data %>% filter(season == "Spring")
summer_data <- data %>% filter(season == "Summer")
fall_data <- data %>% filter(season == "Fall")
winter_data <- data %>% filter(season == "Winter")
# Convert the "River_flow_meters_per_second" column to numeric for each season
spring_data <- spring_data %>%
mutate(River_flow_meters_per_second = as.numeric(River_flow_meters_per_second))
summer_data <- summer_data %>%
mutate(River_flow_meters_per_second = as.numeric(River_flow_meters_per_second))
fall_data <- fall_data %>%
mutate(River_flow_meters_per_second = as.numeric(River_flow_meters_per_second))
winter_data <- winter_data %>%
mutate(River_flow_meters_per_second = as.numeric(River_flow_meters_per_second))
# Calculate the mean flow rate for each season
mean_flow_spring <- mean(spring_data$River_flow_meters_per_second, na.rm = TRUE)
mean_flow_summer <- mean(summer_data$River_flow_meters_per_second, na.rm = TRUE)
mean_flow_fall <- mean(fall_data$River_flow_meters_per_second, na.rm = TRUE)
mean_flow_winter <- mean(winter_data$River_flow_meters_per_second, na.rm = TRUE)
mean_flow<-c(mean_flow_spring,mean_flow_summer,mean_flow_fall,mean_flow_winter)
# Calculate residuals for spring data
spring_data$residual <- spring_data$River_flow_meters_per_second - mean_flow_spring
plot(spring_data$residual)
# Calculate residuals for summer data
summer_data$residual <- summer_data$River_flow_meters_per_second - mean_flow_summer
plot(summer_data$residual)
# Calculate residuals for fall data
fall_data$residual <- fall_data$River_flow_meters_per_second - mean_flow_fall
plot(fall_data$residual)
# Calculate residuals for winter data
winter_data$residual <- winter_data$River_flow_meters_per_second - mean_flow_winter
plot(winter_data$residual)
#Winter data
winter_data_residual <- moment(winter_data$residual, k=c(550:2000))
plot(winter_data_residual$k, winter_data_residual$estimate, type="l", lwd=1.5)
abline(h=0, col="red")
kc<-seq(600,1200)
hill_estimator_winter<- list()
# Calculate Hill estimates for each value of k for  winter
for (i in seq_along(kc)) {
hill_estimator_winter[[i]] <- Hill_estimator(winter_data$residual, kc[i])
}
gamma_hat_winter <- mean(unlist(hill_estimator_winter))
# Spring Data
spring_data_residual <- moment(spring_data$residual, k = c(750:1050))
plot(spring_data_residual$k, spring_data_residual$estimate, type = "l", lwd = 1.5)
abline(h = 0, col = "red")
kc <- seq(750, 1050)
hill_estimator_spring <- list()
# Calculate Hill estimates for each value of k for spring
for (i in seq_along(kc)) {
hill_estimator_spring[[i]] <- Hill_estimator(spring_data$residual, kc[i])
}
gamma_hat_spring <- mean(unlist(hill_estimator_spring))
# Summer Data
summer_data_residual <- moment(summer_data$residual, k = c(2200:3200))
plot(summer_data_residual$k, summer_data_residual$estimate, type = "l", lwd = 1.5)
abline(h = 0, col = "red")
kc<-seq(2200,3200)
hill_estimator_summer <- list()
# Calculate Hill estimates for each value of k for summer
for (i in seq_along(kc)) {
hill_estimator_summer[[i]] <- Hill_estimator(summer_data$residual, kc[i])
}
gamma_hat_summer <- mean(unlist(hill_estimator_summer))
# Fall Data
fall_data_residual <- moment(fall_data$residual, k = c(100:600))
plot(fall_data_residual$k, fall_data_residual$estimate, type = "l", lwd = 1.5)
abline(h = 0, col = "red")
kc<-seq(100,600)
hill_estimator_fall <- list()
# Calculate Hill estimates for each value of k for fall
for (i in seq_along(kc)) {
hill_estimator_fall[[i]] <- Hill_estimator(fall_data$residual, kc[i])
}
gamma_hat_fall <- mean(unlist(hill_estimator_fall))
seasons <- list(
winter = list(data = winter_data, gamma_hat = gamma_hat_winter),
summer = list(data = summer_data, gamma_hat = gamma_hat_summer),
spring = list(data = spring_data, gamma_hat = gamma_hat_spring),
fall   = list(data = fall_data  , gamma_hat = gamma_hat_fall)
)
# Process each season
for (season in names(seasons)) {
# Current season data and gamma
current_data <- seasons[[season]]$data
current_gamma <- seasons[[season]]$gamma_hat
# Calculate x values and density values
x_values <- seq(-1/current_gamma, 20, by = 0.001)
density_values <- sapply(x_values, function(x) density_function(x, current_gamma))
# Calculate annual maxima and normalize
annual_maxima <- current_data %>%
group_by(Year = format(Date, "%Y")) %>%
summarize(MaxResidual = max(residual, na.rm = TRUE)) %>%
mutate(NormalizedMaxResidual = scale(MaxResidual)+0.4)
normalized_maxima <- annual_maxima$NormalizedMaxResidual
# Plotting
par(mar=c(2, 2, 2, 2))
plot(x_values, density_values, type = 'l', col = 'blue', lwd = 2,
main = paste("Density Function and Histogram for", season , " and gamma_hat=", current_gamma),
xlab = "Annual Maximum Flow (m3/s)", ylab = "Density")
hist(normalized_maxima, breaks = 8, freq = FALSE, add = TRUE, col = rgb(1, 0, 0, 0.5))
}
#####Extra Functions ###################
################if you want to use for df replace Cauchy_samples[,1] by Cauchy_samples #############################
hill_estimator_plot_multiple_2_Accurate <- function(kc, cauchy_samples) {
# Initialize list to store Hill estimates
hill_estimator_caushy_1<- list()
hill_estimator_caushy_2<-list()
hill_estimator_caushy_3<-list()
hill_estimator_caushy_4<-list()
hill_estimator_caushy_5<-list()
# Calculate Hill estimates for each value of k
for (i in seq_along(kc)) {
hill_estimator_caushy_1[[i]] <- Hill_estimator(cauchy_samples[,1], kc[i])
hill_estimator_caushy_2[[i]]<- Hill_estimator(cauchy_samples[,2], kc[i])
hill_estimator_caushy_3[[i]]<- Hill_estimator(cauchy_samples[,3], kc[i])
hill_estimator_caushy_4[[i]]<- Hill_estimator(cauchy_samples[,4], kc[i])
hill_estimator_caushy_5[[i]]<- Hill_estimator(cauchy_samples[,5], kc[i])
}
# Convert list to data frame
df_1 <- data.frame(k = kc, Hill_Estimate = unlist(hill_estimator_caushy_1))
ones_column <- rep(1, nrow(df_1))
# Combine your data set with the ones column
df_1 <- cbind(df_1, column = ones_column)
df_2 <- data.frame(k = kc, Hill_Estimate = unlist(hill_estimator_caushy_2))
ones_column <- rep(2, nrow(df_2))
# Combine your data set with the ones column
df_2 <- cbind(df_2, column = ones_column)
df_3 <- data.frame(k = kc, Hill_Estimate = unlist(hill_estimator_caushy_3))
ones_column <- rep(3, nrow(df_3))
# Combine your data set with the ones column
df_3 <- cbind(df_3, column = ones_column)
df_4 <- data.frame(k = kc, Hill_Estimate = unlist(hill_estimator_caushy_4))
ones_column <- rep(4, nrow(df_4))
# Combine your data set with the ones column
df_4 <- cbind(df_4, column = ones_column)
df_5 <- data.frame(k = kc, Hill_Estimate = unlist(hill_estimator_caushy_5))
ones_column <- rep(5, nrow(df_5))
# Combine your data set with the ones column
df_5 <- cbind(df_5, column = ones_column)
library(dplyr)
combined_df <- rbind(df_1, df_2,df_3,df_4,df_5)
# Plot line graph
library(ggplot2)
ggplot(combined_df, aes(x = k, y = Hill_Estimate, color = as.factor(column))) +
geom_line() +
labs(x = "k", y = "Hill Estimate",
title = "Hill Estimates for Different Columns and Values of k") +
scale_color_discrete(name = "Column")
}
limiting_distribution <- function(x, gamma) {
# Ensure 1 + gamma * x is positive
if (1 + gamma * x <= 0) {
stop("Invalid input: Ensure that 1 + gamma * x > 0")
}
# Compute the CDF for the generalized Pareto distribution
result <- exp(-((1 + gamma * x) ^ (-1 / gamma)))
return(result)
}
View(cauchy_samples)
hill_estimates <- vector("list", 5)
# Calculate Hill estimates for each column
for (col in 1:5) {
hill_estimates[[col]] <- sapply(kc, function(k) Hill_estimator(cauchy_samples[, col], k))
}
# Convert list to data frame
df <- data.frame(k = rep(kc, times = 5),
Hill_Estimate = unlist(hill_estimates),
Column = factor(rep(1:5, each = length(ks))))
hill_estimates <- vector("list", 5)
# Calculate Hill estimates for each column
for (col in 1:5) {
hill_estimates[[col]] <- sapply(kc, function(k) Hill_estimator(cauchy_samples[, col], kc))
}
# Convert list to data frame
df <- data.frame(k = rep(kc, times = 5),
Hill_Estimate = unlist(hill_estimates),
Column = factor(rep(1:5, each = length(kc))))
# Plot line graph
library(ggplot2)
ggplot(df, aes(x = k, y = Hill_Estimate, color = Column)) +
geom_line() +
labs(x = "k", y = "Hill Estimate",
title = "Hill Estimates for 1st five Columns of cauchysamples and different Values of k") +
scale_color_discrete(name = "Column")
View(df)
hill_estimates <- vector("list", 5)
# Calculate Hill estimates for each column
for (col in 1:5) {
hill_estimates[[col]] <- sapply(kc, function(k) Hill_estimator(cauchy_samples[, col], kc))
}
# Convert list to data frame
df <- data.frame(k = rep(kc, times = 5),
Hill_Estimate = unlist(hill_estimates),
Column = factor(rep(1:5, each = length(kc))))
# Plot line graph
library(ggplot2)
ggplot(df, aes(x = k, y = Hill_Estimate, color = Column)) +
geom_line() +
labs(x = "k", y = "Hill Estimate",
title = "Hill Estimates for 1st five Columns of cauchysamples and different Values of k") +
scale_color_discrete(name = "Column")
# Initialize list to store Hill estimates
hill_estimates <- vector("list", 5)
# Calculate Hill estimates for each column
for (col in 1:5) {
hill_estimates[[col]] <- sapply(kc, function(k) Hill_estimator(cauchy_samples[, col], k))
}
# Convert list to data frame
df <- data.frame(k = rep(kc, times = 5),
Hill_Estimate = unlist(hill_estimates),
Column = factor(rep(1:5, each = length(kc))))
# Plot line graph
library(ggplot2)
ggplot(df, aes(x = k, y = Hill_Estimate, color = Column)) +
geom_line() +
labs(x = "k", y = "Hill Estimate",
title = "Hill Estimates for 1st five Columns of cauchysamples and different Values of k") +
scale_color_discrete(name = "Column")
hill_estimator_plot_multiple(kc, cauchy_samples)
