hats <- sapply(ages, function(x) f_hat(x)[[2]])
num <- 0
for (i in 1:length(resp)){
num <- num + (resp[i] - f_hats[[cov[i] + 1]])^2
}
sum_ws <- 0
for(i in 1:length(ages)){
if(starts[i] %in% names(hats[[i]])){
ind <- which.max(names(hats[[i]]) == starts[i])
sum_ws <- sum_ws + freq[i] * unname(hats[[i]][ind])
}
}
denom <- (1 - 1/n * sum_ws)^2
return(num / denom)
}
degs <- c(1, 2, 3, 4)
h_opts <- sapply(degs, function(l) optimize(function(h) gcv(h = h, resp = Y, cov = X, l = l, ker = kernel_epanechnikov, k = 0), interval = c(1, 20))$minimum)
local_poly_fit <- function(resp, cov, h, l = 1, ker, k = 0){
f_hat_k <- function(x){
X <- outer(cov - x, 0:l, FUN = "^")
weights <- ker((cov - x) / h)
fit <- lm(resp ~ X + 0, weights = weights)
A_hat <- fit$coefficients %>% unname()
hat <- influence(fit, do.coef = FALSE)$hat
return(list(A_hat[k+1] * factorial(k), hat))
}
return(f_hat_k)
}
gcv <- function(h, resp, cov, l, ker, k){
n <- length(resp)
f_hat <- local_poly_fit(resp = resp, cov = cov, h = h, l = l, ker = ker, k = k)
f_hats <- sapply(x_uni, function(x) f_hat(x)[[1]])
hats <- sapply(x_uni, function(x) f_hat(x)[[2]])
num <- 0
for (i in 1:length(resp)){
num <- num + (resp[i] - f_hats[[cov[i] + 1]])^2
}
sum_ws <- 0
for(i in 1:length(ages)){
if(starts[i] %in% names(hats[[i]])){
ind <- which.max(names(hats[[i]]) == starts[i])
sum_ws <- sum_ws + freq[i] * unname(hats[[i]][ind])
}
}
denom <- (1 - 1/n * sum_ws)^2
return(num / denom)
}
degs <- c(1, 2, 3, 4)
h_opts <- sapply(degs, function(l) optimize(function(h) gcv(h = h, resp = Y, cov = X, l = l, ker = kernel_epanechnikov, k = 0), interval = c(1, 20))$minimum)
local_poly_fit <- function(resp, cov, h, l = 1, ker, k = 0){
f_hat_k <- function(x){
X <- outer(cov - x, 0:l, FUN = "^")
weights <- ker((cov - x) / h)
fit <- lm(resp ~ X + 0, weights = weights)
A_hat <- fit$coefficients %>% unname()
hat <- influence(fit, do.coef = FALSE)$hat
return(list(A_hat[k+1] * factorial(k), hat))
}
return(f_hat_k)
}
gcv <- function(h, resp, cov, l, ker, k){
n <- length(resp)
f_hat <- local_poly_fit(resp = resp, cov = cov, h = h, l = l, ker = ker, k = k)
f_hats <- sapply(x_uni, function(x) f_hat(x)[[1]])
hats <- sapply(x_uni, function(x) f_hat(x)[[2]])
num <- 0
for (i in 1:length(resp)){
num <- num + (resp[i] - f_hats[[cov[i] + 1]])^2
}
sum_ws <- 0
for(i in 1:length(x_uni)){
if(starts[i] %in% names(hats[[i]])){
ind <- which.max(names(hats[[i]]) == starts[i])
sum_ws <- sum_ws + freq[i] * unname(hats[[i]][ind])
}
}
denom <- (1 - 1/n * sum_ws)^2
return(num / denom)
}
degs <- c(1, 2, 3, 4)
h_opts <- sapply(degs, function(l) optimize(function(h) gcv(h = h, resp = Y, cov = X, l = l, ker = kernel_epanechnikov, k = 0), interval = c(1, 20))$minimum)
starts <- sapply(x_uni, function(x) which(X == x)[1])
freq <- sapply(x_uni, function(x) length(which(X == x)))
degs <- c(1, 2, 3, 4)
h_opts <- sapply(degs, function(l) optimize(function(h) gcv(h = h, resp = Y, cov = X, l = l, ker = kernel_epanechnikov, k = 0), interval = c(1, 20))$minimum)
plotData3 <- data.frame(x_uni)
for (i in 1:4) {
f_hat <- local_poly_fit(resp = Y, cov = X, h = h_opts[i], l = degs[i], ker = kernel_epanechnikov, k = 0)
plotData3[paste0(degs[i])] <- sapply(plotData3$x_uni, function(x) f_hat(x)[[1]])
}
plotData3 <- plotData3 %>% pivot_longer(cols = 2:5) %>% rename(degree = name)
library(tidyr)
library(dplyr)
library(ggplot2)
View(plotData3)
plotData3 <- plotData3 %>% pivot_longer(cols = 2:5) %>% rename(degree = name)
ggplot(data = plotData3, aes(x = x_uni, y = value, color = degree)) +
geom_line(linewidth = 0.8) + labs(title = "Local Polynomial Estimator for GCV-optimal bandwidths and varying order")
install.packages("lokern")
library(lokern)
plotData4 <- data.frame(x_uni)
for (i in 1:length(degs)) {
df_hat_eval <- localpoly.reg(cov, resp, points  = plotData4$x_uni, bandwidth = "GCV", degree.pol = degs[i], deriv = 1)$predicted
plotData4[paste0(degs[i])] <- df_hat_eval$Y.p
}
library(lokern)
plotData4 <- data.frame(x_uni)
for (i in 1:length(degs)) {
df_hat_eval <- localpoly(cbind(cov, resp), cbind(plotData4$x_uni), degree = degs[i], kernel = "gaussian", kernel.degree = 1, h = "cv")$y
plotData4[paste0(degs[i])] <- df_hat_eval
}
library(locfit)
library(KernSmooth)
library(locfit)
plotData4 <- data.frame(x_uni)
for (i in 1:length(degs)) {
df_hat_eval <- localpoly.reg(cov, resp, points  = plotData4$x_uni, bandwidth = "GCV", degree.pol = degs[i], deriv = 1)$predicted
plotData4[paste0(degs[i])] <- df_hat_eval$Y.p
}
install.packages('NonpModelCheck')
plotData4 <- data.frame(x_uni)
for (i in 1:length(degs)) {
df_hat_eval <- localpoly.reg(cov, resp, points  = plotData4$x_uni, bandwidth = "GCV", degree.pol = degs[i], deriv = 1)$predicted
plotData4[paste0(degs[i])] <- df_hat_eval$Y.p
}
library(NonpModelCheck)
library("NonpModelCheck")
install.packages('NonpModelCheck')
library('NonpModelCheck')
library('NonpModelCheck')
library('NonpModelCheck')
library('NonpModelCheck')
library('NonpModelCheck')
library('NonpModelCheck')
library('NonpModelCheck')
library('NonpModelCheck')
library('NonpModelCheck')
library('NonpModelCheck')
library(haven)
library(dplyr)
library(ggplot2)
library(tidyr)
install.packages("lokern")
library(lokern)
install.packages('NonpModelCheck')
library('NonpModelCheck')
degs <- c(1, 2, 3, 4)
for (i in 1:length(degs)) {
df_hat_eval <- localpoly.reg(cov, resp, points  = plotData4$x_uni, bandwidth = "GCV", degree.pol = degs[i], deriv = 1)$predicted
library(haven)
library(dplyr)
library(ggplot2)
library(tidyr)
install.packages("lokern")
library(lokern)
install.packages('NonpModelCheck')
library('NonpModelCheck')
data <- read_dta("childrenfinal.dta")
# Load the dplyr package
library(dplyr)
# Use the select() function to select columns name hypage and zwast
selected_data <- dplyr::select(data, hypage, zwast)
X=selected_data$hypage
Y=as.numeric(selected_data$zwast)
x_uni<-sort(unique(X))
starts <- sapply(x_uni, function(x) which(X == x)[1])
freq <- sapply(x_uni, function(x) length(which(X == x)))
local_poly_fit <- function(resp, cov, h, l = 1, ker, k = 0){
f_hat_k <- function(x){
X <- outer(cov - x, 0:l, FUN = "^")
weights <- ker((cov - x) / h)
fit <- lm(resp ~ X + 0, weights = weights)
A_hat <- fit$coefficients %>% unname()
hat <- influence(fit, do.coef = FALSE)$hat
return(list(A_hat[k+1] * factorial(k), hat))
}
return(f_hat_k)
}
gcv <- function(h, resp, cov, l, ker, k){
n <- length(resp)
f_hat <- local_poly_fit(resp = resp, cov = cov, h = h, l = l, ker = ker, k = k)
f_hats <- sapply(x_uni, function(x) f_hat(x)[[1]])
hats <- sapply(x_uni, function(x) f_hat(x)[[2]])
num <- 0
for (i in 1:length(resp)){
num <- num + (resp[i] - f_hats[[cov[i] + 1]])^2
}
sum_ws <- 0
for(i in 1:length(x_uni)){
if(starts[i] %in% names(hats[[i]])){
ind <- which.max(names(hats[[i]]) == starts[i])
sum_ws <- sum_ws + freq[i] * unname(hats[[i]][ind])
}
}
denom <- (1 - 1/n * sum_ws)^2
return(num / denom)
}
degs <- c(1, 2, 3, 4)
plotData4 <- data.frame(x_uni)
for (i in 1:length(degs)) {
df_hat_eval <- localpoly.reg(cov, resp, points  = plotData4$x_uni, bandwidth = "GCV", degree.pol = degs[i], deriv = 1)$predicted
plotData4[paste0(degs[i])] <- df_hat_eval$Y.p
}
plotData4 <- data.frame(x_uni)
h_opt <- sapply(degs, function(l) optimize(function(h) gcv(h = h, resp = Y, cov = X, l = l, ker = kernel_epanechnikov, k = 1), interval = c(1, 20))$minimum)
kernel_epanechnikov <- function(u) { ifelse(abs(u) <= 1, 0.75 * (1 - u^2), 0) }
plotData4 <- data.frame(x_uni)
h_opt <- sapply(degs, function(l) optimize(function(h) gcv(h = h, resp = Y, cov = X, l = l, ker = kernel_epanechnikov, k = 1), interval = c(1, 20))$minimum)
for (i in 1:4) {
f_hat <- local_poly_fit(resp = Y, cov = X, h = h_opt[i], l = degs[i], ker = kernel_epanechnikov, k = 1)
plotData4[paste0(degs[i])] <- sapply(plotData3$x_uni, function(x) f_hat(x)[[1]])
}
for (i in 1:4) {
f_hat <- local_poly_fit(resp = Y, cov = X, h = h_opt[i], l = degs[i], ker = kernel_epanechnikov, k = 1)
plotData4[paste0(degs[i])] <- sapply(plotData4$x_uni, function(x) f_hat(x)[[1]])
}
plotData4 <- plotData4 %>% pivot_longer(cols = 2:5) %>% rename(degree = name)
ggplot(data = plotData4, aes(x = x_uni, y = value, color = degree)) +
geom_line(linewidth = 0.8) + labs(title = "Local Polynomial Estimator for GCV-optimal bandwidths and varying order")
ggplot(data = plotData4, aes(x = x_uni, y = value, color = degree)) +
geom_line(linewidth = 0.8) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # Add horizontal line at y = 0
labs(title = "1st derivative with respect to four degrees", xlab = "ages", ylab = "first derivative")
ggplot(data = plotData4, aes(x = x_uni, y = value, color = degree)) +
geom_line(linewidth = 0.8) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # Add horizontal line at y = 0
labs(title = "1st derivative with respect to four degrees", x = "ages", y = "first derivative")
h_opts <- sapply(degs, function(l) optimize(function(h) gcv(h = h, resp = Y, cov = X, l = l, ker = kernel_epanechnikov, k = 0), interval = c(1, 20))$minimum)
plotData3 <- data.frame(x_uni)
for (i in 1:4) {
f_hat <- local_poly_fit(resp = Y, cov = X, h = h_opts[i], l = degs[i], ker = kernel_epanechnikov, k = 0)
plotData3[paste0(degs[i])] <- sapply(plotData3$x_uni, function(x) f_hat(x)[[1]])
}
plotData3 <- plotData3 %>% pivot_longer(cols = 2:5) %>% rename(degree = name)
ggplot(data = plotData3, aes(x = x_uni, y = value, color = degree)) +
geom_line(linewidth = 0.8) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +  # Add horizontal line at y = 0
labs(title = "GCV-optimal bandwidths with four degrees", x = "Age", y = "intercept")
library(haven)
library(dplyr)
library(ggplot2)
library(tidyr)
# Read data
data <- read_dta("childrenfinal.dta")
# Select relevant columns
selected_data <- dplyr::select(data, hypage, zwast)
# Extract variables
ages <- selected_data$hypage
zwast <- as.numeric(selected_data$zwast)
unique_ages <- sort(unique(ages))
# Find the starting index and frequency of each unique age
starts <- sapply(unique_ages, function(age) which(ages == age)[1])
frequency <- sapply(unique_ages, function(age) length(which(ages == age)))
# Define Epanechnikov kernel
kernel_epanechnikov <- function(u) { ifelse(abs(u) <= 1, 0.75 * (1 - u^2), 0) }
# Local polynomial fitting function
local_poly_fit <- function(response, covariate, bandwidth, degree = 1, kernel, order = 0){
fit_function <- function(x){
X <- outer(covariate - x, 0:degree, FUN = "^")
weights <- kernel((covariate - x) / bandwidth)
fit <- lm(response ~ X + 0, weights = weights)
coefficients <- fit$coefficients %>% unname()
influence <- influence(fit, do.coef = FALSE)$hat
return(list(coefficients[order + 1] * factorial(order), influence))
}
return(fit_function)
}
# Generalized cross-validation function
gcv <- function(h, response, covariate, degree, kernel, order){
n <- length(response)
fit_function <- local_poly_fit(response = response, covariate = covariate, bandwidth = h, degree = degree, kernel = kernel, order = order)
f_hats <- sapply(unique_ages, function(age) fit_function(age)[[1]])
hats <- sapply(unique_ages, function(age) fit_function(age)[[2]])
num <- 0
for (i in 1:length(response)){
num <- num + (response[i] - f_hats[[covariate[i] + 1]])^2
}
sum_ws <- 0
for(i in 1:length(unique_ages)){
if(starts[i] %in% names(hats[[i]])){
ind <- which.max(names(hats[[i]]) == starts[i])
sum_ws <- sum_ws + frequency[i] * unname(hats[[i]][ind])
}
}
denom <- (1 - 1/n * sum_ws)^2
return(num / denom)
}
# Degrees for local polynomial fitting
degrees <- c(1, 2, 3, 4)
# Find GCV-optimal bandwidths
bandwidth_opts <- sapply(degrees, function(degree) {
optimize(function(bandwidth) gcv(h = bandwidth, response = zwast, covariate = ages, degree = degree, kernel = kernel_epanechnikov, order = 0), interval = c(1, 20))$minimum
})
# Generate data frame for plotting
plot_data_gcv <- data.frame(ages = unique_ages)
for (i in 1:4) {
fit_function <- local_poly_fit(response = zwast, covariate = ages, bandwidth = bandwidth_opts[i], degree = degrees[i], kernel = kernel_epanechnikov, order = 0)
plot_data_gcv[[paste0("Degree_", degrees[i])]] <- sapply(plot_data_gcv$ages, function(age) fit_function(age)[[1]])
}
# Plot GCV-optimal bandwidths
ggplot(data = plot_data_gcv, aes(x = ages, y = value, color = variable)) +
geom_line(linewidth = 0.8) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
labs(title = "GCV-optimal bandwidths with four degrees", x = "Age", y = "Intercept")
View(plot_data_gcv)
# Plot GCV-optimal bandwidths
plot_data_gcv <- plot_data_gcv %>% pivot_longer(cols = 2:5) %>% rename(degree = name)
ggplot(data = plot_data_gcv, aes(x = ages, y = value, color = degree)) +
geom_line(linewidth = 0.8) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
labs(title = "GCV-optimal bandwidths with four degrees", x = "Age", y = "Intercept")
# Find GCV-optimal bandwidths for the first derivative
bandwidth_opts_first_derivative <- sapply(degrees, function(degree) {
optimize(function(bandwidth) gcv(h = bandwidth, response = zwast, covariate = ages, degree = degree, kernel = kernel_epanechnikov, order = 1), interval = c(1, 20))$minimum
})
# Generate data frame for plotting
plot_data_first_derivative <- data.frame(ages = unique_ages)
for (i in 1:4) {
fit_function <- local_poly_fit(response = zwast, covariate = ages, bandwidth = bandwidth_opts_first_derivative[i], degree = degrees[i], kernel = kernel_epanechnikov, order = 1)
plot_data_first_derivative[[paste0("Degree_", degrees[i])]] <- sapply(plot_data_first_derivative$ages, function(age) fit_function(age)[[1]])
}
# Plot first derivative with respect to four degrees
plot_data_first_derivative <- plot_data_first_derivative %>% pivot_longer(cols = 2:5) %>% rename(degree = name)
ggplot(data = plot_data_first_derivative, aes(x = ages, y = value, color = degree)) +
geom_line(linewidth = 0.8) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
labs(title = "First derivative with respect to four degrees", x = "Age", y = "First derivative")
#Loading the data
library(haven)
library(dplyr)
library(ggplot2)
library(tidyr)
df<-read_dta("childrenfinal.dta")
x_data<- as.vector(df$hypage)
y_data<- as.vector(df$zwast)
data<-data.frame(x_data,y_data)
kernel_uniform <- function(u) { ifelse(abs(u) <= 1, 0.5, 0) }
kernel_triangular <- function(u) { ifelse(abs(u) <= 1, 1 - abs(u), 0) }
kernel_gaussian <- function(u) { dnorm(u) }
kernel_epanechnikov <- function(u) { ifelse(abs(u) <= 1, 0.75 * (1 - u^2), 0) }
local_poly_fit <- function(x, response, covariate, bandwidth, kernel, degree) {
# Calculate residuals
residual <- covariate - x
# Generate powers of residuals for polynomial terms
d <- 0:degree  # This gives a vector of degrees from 0 up to 'degree'
bias_corrected_covariate <- outer(residual, d, FUN = "^")
# Define the weights using the kernel function
weights <- kernel(residual / bandwidth)
# Fit the model using weights
fit <- lm(response ~ bias_corrected_covariate + 0, weights = weights)
# Return the fitted model
return(fit)
}
apply_bandwidth_fit <- function(x_data, y_data, bandwidths, degree, kernel) {
results <- sapply(bandwidths, function(bandwidth) {
sapply(x_data, function(x) {
fit <- local_poly_fit(x, response = y_data, covariate = x_data, bandwidth = bandwidth, degree = degree, kernel = kernel)
return(fit$coefficients[1])  # Assuming the coefficient of interest is at position 1
})
}, simplify = "array")
# Set the column names for each bandwidth result
colnames(results) <- paste("Bandwidth", bandwidths, sep = "_")
# Combine x_data with results into a data frame
return(data.frame(x_data, results))
}
# Apply the function
results <- apply_bandwidth_fit(x_data, y_data, bandwidth=c(2, 6, 11, 20,50), 1, kernel_uniform)
# Convert results to a data frame
plot_data_bandwidth <- data.frame(x_data, results)
plot_data_long <- pivot_longer(plot_data_bandwidth,
cols = starts_with("Bandwidth"),
names_to = "Bandwidth",
values_to = "Value")
# Base plot
p <- ggplot() +
geom_line(data = plot_data_long, aes(x = x_data, y = Value, color = Bandwidth), size = 1) +
geom_point(data = data, aes(x = x_data, y = y_data), color = "black", size = 1,alpha=0.2) +
labs(title = "Local Polynomial Regression and Data Points",
x = "X Values",
y = "Predictoin") +
theme_minimal() +
scale_color_brewer(palette = "Set1")  # Using a color palette for clarity
# Print the plot
print(p)
# Plot using ggplot2
ggplot(plot_data_long, aes(x = x_data, y = Value, color = Bandwidth)) +
geom_line() +
labs(title = "Local Polynomial Regression Across Different Bandwidths",
x = "x_data", y = "Value", color = "Bandwidth")
apply_kernel_fit <- function(x_data, y_data, bandwidth, degree, kernels) {
sapply(kernels, function(kernel) {
sapply(x_data, function(x) {
fit <- local_poly_fit(x, response = y_data, covariate = x_data, bandwidth = bandwidth, degree = degree, kernel = kernel)
fit$coefficients[1]  # Assuming the coefficient of interest is at position 1
})
})
}
# Define your kernels in a named list for easy reference and modification
kernels <- list(
"Uniform" = kernel_uniform,
"Triangular" = kernel_triangular,
"Gaussian" = kernel_gaussian,
"Epanechnikov" = kernel_epanechnikov
)
# Apply the function
results <- apply_kernel_fit(x_data, y_data, 4, 1, kernels)
# Convert results to a data frame
plot_data_kernel <- data.frame(x_data, results)
plot_data_kernel <- pivot_longer(plot_data_kernel,
cols = -x_data,  # Exclude x_data from pivoting
names_to = "Kernel",
values_to = "Value")
ggplot(plot_data_kernel, aes(x = x_data, y = Value, color = Kernel)) +
geom_line() +
labs(title = "Local Polynomial Fits Across Different Kernels",
x = "x_data", y = "Fitted Value", color = "Kernel")
# Load necessary packages
library(haven)  # For reading Stata files
library(dplyr)  # For data manipulation
library(ggplot2)  # For plotting
library(tidyr)  # For data reshaping
# Read the Stata file and create a data frame
df <- read_dta("childrenfinal.dta")
x_data <- as.vector(df$hypage)
y_data <- as.vector(df$zwast)
data <- data.frame(x_data, y_data)
# Define kernel functions
kernel_uniform <- function(u) { ifelse(abs(u) <= 1, 0.5, 0) }
kernel_triangular <- function(u) { ifelse(abs(u) <= 1, 1 - abs(u), 0) }
kernel_gaussian <- function(u) { dnorm(u) }
kernel_epanechnikov <- function(u) { ifelse(abs(u) <= 1, 0.75 * (1 - u^2), 0) }
# Function for local polynomial fitting
local_poly_fit <- function(x, response, covariate, bandwidth, kernel, degree) {
# Calculate residuals
residual <- covariate - x
# Generate powers of residuals for polynomial terms
d <- 0:degree  # This gives a vector of degrees from 0 up to 'degree'
bias_corrected_covariate <- outer(residual, d, FUN = "^")
# Define the weights using the kernel function
weights <- kernel(residual / bandwidth)
# Fit the model using weights
fit <- lm(response ~ bias_corrected_covariate + 0, weights = weights)
# Return the fitted model
return(fit)
}
# Function to apply bandwidth fits
apply_bandwidth_fit <- function(x_data, y_data, bandwidths, degree, kernel) {
results <- sapply(bandwidths, function(bandwidth) {
sapply(x_data, function(x) {
fit <- local_poly_fit(x, response = y_data, covariate = x_data, bandwidth = bandwidth, degree = degree, kernel = kernel)
return(fit$coefficients[1])  # Assuming the coefficient of interest is at position 1
})
}, simplify = "array")
# Set the column names for each bandwidth result
colnames(results) <- paste("Bandwidth", bandwidths, sep = "_")
# Combine x_data with results into a data frame
return(data.frame(x_data, results))
}
# Apply the function
results <- apply_bandwidth_fit(x_data, y_data, bandwidth=c(2, 6, 11, 20,50), 1, kernel_uniform)
# Convert results to a data frame
plot_data_bandwidth <- data.frame(x_data, results)
plot_data_long <- pivot_longer(plot_data_bandwidth,
cols = starts_with("Bandwidth"),
names_to = "Bandwidth",
values_to = "Value")
# Base plot
p <- ggplot() +
geom_line(data = plot_data_long, aes(x = x_data, y = Value, color = Bandwidth), size = 1) +
geom_point(data = data, aes(x = x_data, y = y_data), color = "black", size = 1,alpha=0.2) +
labs(title = "Local Polynomial Regression and Data Points",
x = "X Values",
y = "Predictoin") +
theme_minimal() +
scale_color_brewer(palette = "Set1")  # Using a color palette for clarity
# Print the plot
print(p)
# Plot using ggplot2
ggplot(plot_data_long, aes(x = x_data, y = Value, color = Bandwidth)) +
geom_line() +
labs(title = "Local Polynomial Regression Across Different Bandwidths",
x = "x_data", y = "Value", color = "Bandwidth")
# Function to apply kernel fits
apply_kernel_fit <- function(x_data, y_data, bandwidth, degree, kernels) {
sapply(kernels, function(kernel) {
sapply(x_data, function(x) {
fit <- local_poly_fit(x, response = y_data, covariate = x_data, bandwidth = bandwidth, degree = degree, kernel = kernel)
fit$coefficients[1]  # Assuming the coefficient of interest is at position 1
})
})
}
# Apply the function
results <- apply_kernel_fit(x_data, y_data, 4, 1, kernels)
# Define your kernels in a named list for easy reference and modification
kernels <- list(
"Uniform" = kernel_uniform,
"Triangular" = kernel_triangular,
"Gaussian" = kernel_gaussian,
"Epanechnikov" = kernel_epanechnikov
)
# Apply the function
results <- apply_kernel_fit(x_data, y_data, 4, 1, kernels)
# Convert results to a data frame
plot_data_kernel <- data.frame(x_data, results)
plot_data_kernel <- pivot_longer(plot_data_kernel,
cols = -x_data,  # Exclude x_data from pivoting
names_to = "Kernel",
values_to = "Value")
ggplot(plot_data_kernel, aes(x = x_data, y = Value, color = Kernel)) +
geom_line() +
labs(title = "Local Polynomial Fits Across Different Kernels",
x = "x_data", y = "Fitted Value", color = "Kernel")
