getwd()
gc()
library(haven)
data <- read_dta("childrenfinal.dta")
getwd()
##########PRAT(a)#####################################################################
library(haven)
data <- read_dta("childrenfinal.dta")
library(haven)
data <- read_dta("childrenfinal.dta")
library(haven)
data <- read_dta("childrenfinal.dta")
data <- read_dta("childrenfinal")
data <- read_dta("childrenfinal")
data <- read_dta("childrenfinal.dta")
data <- read_dta(childrenfinal.dta)
getwd
getwd()
data <- read_dta("childrenfinal.dta")
data <- read_dta("childrenfinal.DTA")
data <- read_dta("childrenfinal.dta")
data <- read_dta("childrenfinal.dta")
data <- read("childrenfinal.dta")
data <- read_dta("childrenfinal")
create_random_sample <- function(n, p) {
sample(1:n, size = ceiling(n * p), replace = FALSE)
}
random_num= create_random_sample(100,0.05)
random_num
# Define the function to create train and test datasets
create_train_test_datasets <- function(dataset, indices) {
# Extract train set using specified indices
train_set <- dataset[indices]
# Extract test set using remaining indices
test_set <- dataset[-indices]
# Return train and test sets as a list
return(list(train_set = train_set, test_set = test_set))
}
# Define the normalize_datasets function
normalize_datasets <- function(train_set, test_set) {
# Compute mean and standard deviation of the train set
train_mean <- mean(train_set)
train_sd <- sd(train_set)
test_mean <- mean(test_set)
test_sd <- sd(test_set)
# Apply normalization to train set
normalized_train_set <- scale(train_set, center = train_mean, scale = train_sd)
# Apply the same transformation to the test set
normalized_test_set <- scale(test_set, center = test_mean, scale = test_sd)
# Return both normalized datasets
return(list(normalized_train_set = normalized_train_set, normalized_test_set = normalized_test_set))
}
source("create_train_test_datasets.R")
source("create_random_sample.R")
source("normalize_datasets.R")
# Access the waiting column of the faithful dataset
data <- faithful$waiting
n <- length(data)
random_num<-create_random_sample(n,0.5)
# Create train and test datasets using the function
result <- create_train_test_datasets(data, random_num)
# Access train and test sets
train_set <- result$train_set
test_set <- result$test_set
# Normalize the datasets
normalized_data <- normalize_datasets(train_set, test_set)
# Access the normalized train and test sets
normalized_train_set <- normalized_data$normalized_train_set
normalized_test_set <- normalized_data$normalized_test_set
# Print the normalized datasets
print("Normalized Train Set:")
hist(normalized_train_set)
print("Normalized Test Set:")
hist(normalized_test_set)
# Print the normalized datasets
print("Normalized Train Set:")
hist(normalized_train_set,main = "Histogram of Train data set", xlab = "Normalized train data point", ylab = "Frequency")
print("Normalized Test Set:")
hist(normalized_test_set,main = "Histogram of Test data set", xlab = "Normalized test data point", ylab = "Frequency")
# Function to create a random sample
# Arguments:
#   n: The total number of elements in the sample population
#   p: The proportion of elements to sample from the population
# Returns:
#   A random sample of indices from the population
create_random_sample <- function(n, p) {
# Use the sample() function to generate a random sample of indices
# from 1 to n, with replacement set to FALSE (no duplicates)
# The size of the sample is calculated as the ceiling of (n * p),
# ensuring at least one element is sampled if p is not a whole number
sample(1:n, size = ceiling(n * p), replace = FALSE)
}
# Call the function to create a random sample
# Here, it generates a random sample of 5% of the indices from
# a population of 100 elements
random_num = create_random_sample(100, 0.05)
# Print the random sample
random_num
# Define the normalize_datasets function
normalize_datasets <- function(train_set, test_set) {
# Compute mean and standard deviation of the train set
train_mean <- mean(train_set)
train_sd <- sd(train_set)
test_mean <- mean(test_set)
test_sd <- sd(test_set)
# Apply normalization to train set
normalized_train_set <- scale(train_set, center = train_mean, scale = train_sd)
# Apply the same transformation to the test set
normalized_test_set <- scale(test_set, center = test_mean, scale = test_sd)
# Return both normalized datasets
return(list(normalized_train_set = normalized_train_set, normalized_test_set = normalized_test_set))
}
source("create_train_test_datasets.R")
source("create_random_sample.R")
source("normalize_datasets.R")
# Access the waiting column of the faithful dataset
data <- faithful$waiting
n <- length(data)
random_num<-create_random_sample(n,0.5)
# Create train and test datasets using the function
result <- create_train_test_datasets(data, random_num)
# Access train and test sets
train_set <- result$train_set
test_set <- result$test_set
# Normalize the datasets
normalized_data <- normalize_datasets(train_set, test_set)
# Access the normalized train and test sets
normalized_train_set <- normalized_data$normalized_train_set
normalized_test_set <- normalized_data$normalized_test_set
# Print the normalized datasets
print("Normalized Train Set:")
hist(normalized_train_set,main = "Histogram of Train data set", xlab = "Normalized train data point", ylab = "Frequency")
print("Normalized Test Set:")
hist(normalized_test_set,main = "Histogram of Test data set", xlab = "Normalized test data point", ylab = "Frequency")
# This function creates train and test datasets from a given dataset based on specified indices.
# Arguments:
#   dataset: The original dataset from which to create train and test sets.
#   indices: A vector of indices specifying which rows of the dataset belong to the train set.
# Returns:
#   A list containing the train and test datasets.
create_train_test_datasets <- function(dataset, indices) {
# Extract the train set using the specified indices
train_set <- dataset[indices]
# Extract the test set using the remaining indices
test_set <- dataset[-indices]
# Return the train and test sets as a list
return(list(train_set = train_set, test_set = test_set))
}
# Function to create train and test datasets from a given dataset
# Arguments:
#   dataset: The dataset from which to create train and test sets
#   indices: The indices specifying which rows of the dataset belong to the train set
# Returns:
#   A list containing the train and test datasets
create_train_test_datasets <- function(dataset, indices) {
# Extract the train set using the specified indices
train_set <- dataset[indices]
# Extract the test set using the remaining indices
test_set <- dataset[-indices]
# Return the train and test sets as a list
return(list(train_set = train_set, test_set = test_set))
}
# Function to create a random sample
# Arguments:
#   n: The total number of elements in the sample population
#   p: The proportion of elements to sample from the population
# Returns:
#   A random sample of indices from the population
create_random_sample <- function(n, p) {
# Use the sample() function to generate a random sample of indices
# from 1 to n, with replacement set to FALSE (no duplicates)
# The size of the sample is calculated as the ceiling of (n * p),
# ensuring at least one element is sampled if p is not a whole number
sample(1:n, size = ceiling(n * p), replace = FALSE)
}
# Call the function to create a random sample
# Here, it generates a random sample of 5% of the indices from
# a population of 100 elements
random_num = create_random_sample(100, 0.05)
# Print the random sample
random_num
# Load the custom functions for creating train and test datasets, generating random samples, and normalizing datasets
source("create_train_test_datasets.R")
source("create_random_sample.R")
source("normalize_datasets.R")
# Access the waiting column of the faithful dataset
data <- faithful$waiting
n <- length(data)
# Generate a random sample to split the dataset into train and test sets
random_num <- create_random_sample(n, 0.5)
# Create train and test datasets using the function
result <- create_train_test_datasets(data, random_num)
# Access train and test sets
train_set <- result$train_set
test_set <- result$test_set
# Normalize the datasets
normalized_data <- normalize_datasets(train_set, test_set)
# Access the normalized train and test sets
normalized_train_set <- normalized_data$normalized_train_set
normalized_test_set <- normalized_data$normalized_test_set
# Print the normalized datasets along with histograms
print("Normalized Train Set:")
hist(normalized_train_set, main = "Histogram of Train data set", xlab = "Normalized train data point", ylab = "Frequency")
print("Normalized Test Set:")
hist(normalized_test_set, main = "Histogram of Test data set", xlab = "Normalized test data point", ylab = "Frequency")
